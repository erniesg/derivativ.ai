[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "derivativ-ai"
version = "0.1.0"
description = "Cambridge IGCSE Mathematics question generation and assessment system"
authors = [{name = "Ernie", email = "ernie@example.com"}]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "asyncio",
    "aiofiles",
    "jinja2>=3.1.0",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0"
]

# Ruff configuration
[tool.ruff]
# Target Python 3.9+
target-version = "py39"
line-length = 100
indent-width = 4

# Enable specific rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C90",  # mccabe complexity
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "B007",   # Loop control variable not used within loop body
    "B904",   # Within except clause, raise exceptions with raise ... from err
    "F841",   # Local variable assigned but never used
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR2004", # Magic value used in comparison
    "N818",   # Exception name should be named with an Error suffix
    "C901",   # Function is too complex
    "SIM110", # Use return all() instead of for loop
    "PLW2901", # for loop variable overwritten by assignment target
    "RUF001", # String contains ambiguous characters
    "RUF013", # PEP 484 prohibits implicit Optional
]

# Exclude specific files/directories
exclude = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    "*.egg-info",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

[tool.ruff.lint.isort]
# Group imports
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (services working together)",
    "e2e: End-to-end tests (full workflows)",
    "performance: Performance and load tests (slow)",
]
addopts = "--tb=short --strict-markers"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "jinja2.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/config/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
